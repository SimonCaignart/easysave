<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="btnDelete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="businessSoft" xml:space="preserve">
    <value>Business Software</value>
  </data>
  <data name="completeDone" xml:space="preserve">
    <value>Complete save completed !</value>
  </data>
  <data name="completeType" xml:space="preserve">
    <value>Complete</value>
  </data>
  <data name="createasave" xml:space="preserve">
    <value>CREATE A SAVE</value>
  </data>
  <data name="cryptoSoft" xml:space="preserve">
    <value>CryptoSoft</value>
  </data>
  <data name="CryptoSoftSettings" xml:space="preserve">
    <value>CryptoSoft Settings</value>
  </data>
  <data name="deleteasave" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="deleteSave" xml:space="preserve">
    <value>The save has been deleted !</value>
  </data>
  <data name="destinationEmpty" xml:space="preserve">
    <value>Destination Path is empty.</value>
  </data>
  <data name="destinationNotFound" xml:space="preserve">
    <value>Destination is not a correct Path.</value>
  </data>
  <data name="destinationPath" xml:space="preserve">
    <value>Path of the destination directory :</value>
  </data>
  <data name="differentialDone" xml:space="preserve">
    <value>Differential save completed !</value>
  </data>
  <data name="differentialType" xml:space="preserve">
    <value>Differential</value>
  </data>
  <data name="differentPath" xml:space="preserve">
    <value>Source is the same as the Destination.</value>
  </data>
  <data name="extensionAlreadyExist" xml:space="preserve">
    <value>This extension is already in the list.</value>
  </data>
  <data name="ExtensionList" xml:space="preserve">
    <value>List of crypted extensions</value>
  </data>
  <data name="extensionNotValid" xml:space="preserve">
    <value>Not a valid extension. It must begin with a "."</value>
  </data>
  <data name="intro" xml:space="preserve">
    <value>Welcome to EasySave,

This backup software allows  you to manage various 
backup jobs by offering you various features such as
creating, managing or encrypting backup jobs.</value>
  </data>
  <data name="keyPart1" xml:space="preserve">
    <value>The key you entered is not long enough. It must be 64 characters long minimum, this one is just </value>
  </data>
  <data name="keyPart2" xml:space="preserve">
    <value>characters long.</value>
  </data>
  <data name="labelAddExtension" xml:space="preserve">
    <value>Add an extension that needs to be crypted</value>
  </data>
  <data name="labelAddPriorityExtension" xml:space="preserve">
    <value>Add an extension that must be given priority</value>
  </data>
  <data name="labelCryptoKey" xml:space="preserve">
    <value>Encryption Key</value>
  </data>
  <data name="labelInfoMaxFileSize" xml:space="preserve">
    <value>If you put 0, there will be no limit for the maximum file size.</value>
  </data>
  <data name="labelListWorkSoftware" xml:space="preserve">
    <value>Authorized work software</value>
  </data>
  <data name="labelListWorkSoftware2" xml:space="preserve">
    <value>Banned work software</value>
  </data>
  <data name="labelMaxFileSize" xml:space="preserve">
    <value>Maximum size for the saved files (mb)</value>
  </data>
  <data name="labelMaxSize" xml:space="preserve">
    <value>Maximum file size</value>
  </data>
  <data name="labelWorkSoftware" xml:space="preserve">
    <value>Work Software</value>
  </data>
  <data name="listallsaves" xml:space="preserve">
    <value>List of the saves</value>
  </data>
  <data name="managesave" xml:space="preserve">
    <value>MANAGE THE SAVES</value>
  </data>
  <data name="Modify" xml:space="preserve">
    <value>Modify</value>
  </data>
  <data name="notValidSize" xml:space="preserve">
    <value>Not a valid size. It must be only numbers</value>
  </data>
  <data name="PriorityExtensionList" xml:space="preserve">
    <value>List of priority extensions</value>
  </data>
  <data name="PriorityExtensions" xml:space="preserve">
    <value>Priority Files</value>
  </data>
  <data name="runallsaves" xml:space="preserve">
    <value>Run all saves</value>
  </data>
  <data name="runsave" xml:space="preserve">
    <value>RUN A SAVE</value>
  </data>
  <data name="runSaveDone" xml:space="preserve">
    <value>The run is over !</value>
  </data>
  <data name="runspecificsave" xml:space="preserve">
    <value>Run a specific save</value>
  </data>
  <data name="sameName" xml:space="preserve">
    <value>This name already exist.</value>
  </data>
  <data name="saveName" xml:space="preserve">
    <value>Name of the save :</value>
  </data>
  <data name="saveType" xml:space="preserve">
    <value>Type of save </value>
  </data>
  <data name="software" xml:space="preserve">
    <value>Work software is running.</value>
  </data>
  <data name="sourceEmpty" xml:space="preserve">
    <value>Source Path is empty.</value>
  </data>
  <data name="sourceNotFound" xml:space="preserve">
    <value>Directory Source does not exist.</value>
  </data>
  <data name="sourcePath" xml:space="preserve">
    <value>Path of the directory you want to save :</value>
  </data>
</root>